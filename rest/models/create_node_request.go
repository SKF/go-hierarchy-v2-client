// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/SKF/go-utility/v2/uuid"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNodeRequest create node request
//
// swagger:model CreateNodeRequest
type CreateNodeRequest struct {

	// Possible answers to a single choice or multi choice inspection.
	Answers []*Answer `json:"answers"`

	// Only valid for asset type nodes
	AssetType *AssetType `json:"assetType,omitempty"`

	// Which country the node is in. Only valid for site type node
	Country string `json:"country,omitempty"`

	// Timestamp of node creation
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Only valid for asset type nodes
	// Required: true
	Criticality *string `json:"criticality"`

	// Type of device used to take measurements on this point. Only valid for measurement point type nodes
	DadType string `json:"dadType,omitempty"`

	// Description of the node
	Description string `json:"description,omitempty"`

	// ID of node, as a UUID
	ID uuid.UUID `json:"id,omitempty"`

	// Industry segment of this node. Only valid for site type node
	Industry *Industry `json:"industry,omitempty"`

	// Type of value to record.
	// Required: true
	// Enum: [numeric single_choice multi_choice]
	InspectionType *string `json:"inspectionType"`

	// Descriptive name of the node
	// Required: true
	Label *string `json:"label"`

	// Locked indicates if this node is locked for editing by someone
	Locked *Lock `json:"locked,omitempty"`

	// Type of lubricant used. Only valid for lubrication point type nodes
	// Required: true
	Lubricant *string `json:"lubricant"`

	// Amount of lubricant to be used. Only valid for lubrication point type nodes
	LubricantQuantity *NaturalQuantity `json:"lubricantQuantity,omitempty"`

	// Instruction for lubrication activity. Only valid for lubrication point type nodes
	LubricateInstructions string `json:"lubricateInstructions,omitempty"`

	// ActivityAssetState the asset should be in during the lubrication activity. Only valid for lubrication point type nodes
	// Enum: [must_be_on must_be_off]
	LubricationActivityAssetState string `json:"lubricationActivityAssetState,omitempty"`

	// Only valid for asset type nodes
	Manufacturer string `json:"manufacturer,omitempty"`

	// Type of measurement. Only valid for measurement point type nodes
	// Required: true
	// Enum: [displacement acceleration velocity temperature dc_gap ampl_phase box speed envelope_2 envelope_3 unknown]
	MeasurementType *string `json:"measurementType"`

	// Metadata with keys and optional values
	Metadata NodeMetaData `json:"metadata,omitempty"`

	// Only valid for asset type nodes
	Model string `json:"model,omitempty"`

	// Orientation of measurement. Only valid for measurement point type nodes
	// Required: true
	// Enum: [axial radial radial90 horizontal vertical unknown]
	Orientation *string `json:"orientation"`

	// Origin of node, if imported from another system
	Origin *Origin `json:"origin,omitempty"`

	// ID of parent node, as a UUID
	// Required: true
	ParentID *string `json:"parentId"`

	// Relative position of node in the Enlight Centre UI
	// Minimum: 0
	Position *int64 `json:"position,omitempty"`

	// Which postal code the site has. Only valid for site type node
	PostalCode string `json:"postalCode,omitempty"`

	// Only valid for asset type nodes
	SerialNumber string `json:"serialNumber,omitempty"`

	// Subtype of node
	// Required: true
	// Enum: [root company site plant ship system functional_location asset measurement_location measurement_point inspection_point lubrication_point]
	Subtype *string `json:"subtype"`

	// Type of node
	// Required: true
	// Enum: [root company site plant system functional_location asset measurement_location measurement_point inspection_point lubrication_point unknown]
	Type *string `json:"type"`

	// Unit of value recorded. Only valid for inspection points of type `numeric`.
	Unit string `json:"unit,omitempty"`

	// Timestamp of last node update
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// Maximum value used when visualizing the value of the point on a scale. Only valid for inspection points of type `numeric`.
	VisualizationMaxValue float64 `json:"visualizationMaxValue,omitempty"`

	// Minimum value used when visualizing the value of the point on a scale. Only valid for inspection points of type `numeric`.
	VisualizationMinValue float64 `json:"visualizationMinValue,omitempty"`

	// Type of visualization in Enlight Centre. Only valid for inspection points of type `numeric`.
	// Enum: [visualization_none visualization_circular_gauge visualization_level_gauge]
	VisualizationType string `json:"visualizationType,omitempty"`
}

// Validate validates this create node request
func (m *CreateNodeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriticality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndustry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLubricant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLubricantQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLubricationActivityAssetState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasurementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrientation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisualizationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNodeRequest) validateAnswers(formats strfmt.Registry) error {

	if swag.IsZero(m.Answers) { // not required
		return nil
	}

	for i := 0; i < len(m.Answers); i++ {
		if swag.IsZero(m.Answers[i]) { // not required
			continue
		}

		if m.Answers[i] != nil {
			if err := m.Answers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("answers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateNodeRequest) validateAssetType(formats strfmt.Registry) error {

	if swag.IsZero(m.AssetType) { // not required
		return nil
	}

	if m.AssetType != nil {
		if err := m.AssetType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateNodeRequest) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateCriticality(formats strfmt.Registry) error {

	if err := validate.Required("criticality", "body", m.Criticality); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateIndustry(formats strfmt.Registry) error {

	if swag.IsZero(m.Industry) { // not required
		return nil
	}

	if m.Industry != nil {
		if err := m.Industry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("industry")
			}
			return err
		}
	}

	return nil
}

var createNodeRequestTypeInspectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["numeric","single_choice","multi_choice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeInspectionTypePropEnum = append(createNodeRequestTypeInspectionTypePropEnum, v)
	}
}

const (

	// CreateNodeRequestInspectionTypeNumeric captures enum value "numeric"
	CreateNodeRequestInspectionTypeNumeric string = "numeric"

	// CreateNodeRequestInspectionTypeSingleChoice captures enum value "single_choice"
	CreateNodeRequestInspectionTypeSingleChoice string = "single_choice"

	// CreateNodeRequestInspectionTypeMultiChoice captures enum value "multi_choice"
	CreateNodeRequestInspectionTypeMultiChoice string = "multi_choice"
)

// prop value enum
func (m *CreateNodeRequest) validateInspectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeInspectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateInspectionType(formats strfmt.Registry) error {

	if err := validate.Required("inspectionType", "body", m.InspectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateInspectionTypeEnum("inspectionType", "body", *m.InspectionType); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateLocked(formats strfmt.Registry) error {

	if swag.IsZero(m.Locked) { // not required
		return nil
	}

	if m.Locked != nil {
		if err := m.Locked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locked")
			}
			return err
		}
	}

	return nil
}

func (m *CreateNodeRequest) validateLubricant(formats strfmt.Registry) error {

	if err := validate.Required("lubricant", "body", m.Lubricant); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateLubricantQuantity(formats strfmt.Registry) error {

	if swag.IsZero(m.LubricantQuantity) { // not required
		return nil
	}

	if m.LubricantQuantity != nil {
		if err := m.LubricantQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lubricantQuantity")
			}
			return err
		}
	}

	return nil
}

var createNodeRequestTypeLubricationActivityAssetStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["must_be_on","must_be_off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeLubricationActivityAssetStatePropEnum = append(createNodeRequestTypeLubricationActivityAssetStatePropEnum, v)
	}
}

const (

	// CreateNodeRequestLubricationActivityAssetStateMustBeOn captures enum value "must_be_on"
	CreateNodeRequestLubricationActivityAssetStateMustBeOn string = "must_be_on"

	// CreateNodeRequestLubricationActivityAssetStateMustBeOff captures enum value "must_be_off"
	CreateNodeRequestLubricationActivityAssetStateMustBeOff string = "must_be_off"
)

// prop value enum
func (m *CreateNodeRequest) validateLubricationActivityAssetStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeLubricationActivityAssetStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateLubricationActivityAssetState(formats strfmt.Registry) error {

	if swag.IsZero(m.LubricationActivityAssetState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLubricationActivityAssetStateEnum("lubricationActivityAssetState", "body", m.LubricationActivityAssetState); err != nil {
		return err
	}

	return nil
}

var createNodeRequestTypeMeasurementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["displacement","acceleration","velocity","temperature","dc_gap","ampl_phase","box","speed","envelope_2","envelope_3","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeMeasurementTypePropEnum = append(createNodeRequestTypeMeasurementTypePropEnum, v)
	}
}

const (

	// CreateNodeRequestMeasurementTypeDisplacement captures enum value "displacement"
	CreateNodeRequestMeasurementTypeDisplacement string = "displacement"

	// CreateNodeRequestMeasurementTypeAcceleration captures enum value "acceleration"
	CreateNodeRequestMeasurementTypeAcceleration string = "acceleration"

	// CreateNodeRequestMeasurementTypeVelocity captures enum value "velocity"
	CreateNodeRequestMeasurementTypeVelocity string = "velocity"

	// CreateNodeRequestMeasurementTypeTemperature captures enum value "temperature"
	CreateNodeRequestMeasurementTypeTemperature string = "temperature"

	// CreateNodeRequestMeasurementTypeDcGap captures enum value "dc_gap"
	CreateNodeRequestMeasurementTypeDcGap string = "dc_gap"

	// CreateNodeRequestMeasurementTypeAmplPhase captures enum value "ampl_phase"
	CreateNodeRequestMeasurementTypeAmplPhase string = "ampl_phase"

	// CreateNodeRequestMeasurementTypeBox captures enum value "box"
	CreateNodeRequestMeasurementTypeBox string = "box"

	// CreateNodeRequestMeasurementTypeSpeed captures enum value "speed"
	CreateNodeRequestMeasurementTypeSpeed string = "speed"

	// CreateNodeRequestMeasurementTypeEnvelope2 captures enum value "envelope_2"
	CreateNodeRequestMeasurementTypeEnvelope2 string = "envelope_2"

	// CreateNodeRequestMeasurementTypeEnvelope3 captures enum value "envelope_3"
	CreateNodeRequestMeasurementTypeEnvelope3 string = "envelope_3"

	// CreateNodeRequestMeasurementTypeUnknown captures enum value "unknown"
	CreateNodeRequestMeasurementTypeUnknown string = "unknown"
)

// prop value enum
func (m *CreateNodeRequest) validateMeasurementTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeMeasurementTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateMeasurementType(formats strfmt.Registry) error {

	if err := validate.Required("measurementType", "body", m.MeasurementType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMeasurementTypeEnum("measurementType", "body", *m.MeasurementType); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := m.Metadata.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metadata")
		}
		return err
	}

	return nil
}

var createNodeRequestTypeOrientationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["axial","radial","radial90","horizontal","vertical","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeOrientationPropEnum = append(createNodeRequestTypeOrientationPropEnum, v)
	}
}

const (

	// CreateNodeRequestOrientationAxial captures enum value "axial"
	CreateNodeRequestOrientationAxial string = "axial"

	// CreateNodeRequestOrientationRadial captures enum value "radial"
	CreateNodeRequestOrientationRadial string = "radial"

	// CreateNodeRequestOrientationRadial90 captures enum value "radial90"
	CreateNodeRequestOrientationRadial90 string = "radial90"

	// CreateNodeRequestOrientationHorizontal captures enum value "horizontal"
	CreateNodeRequestOrientationHorizontal string = "horizontal"

	// CreateNodeRequestOrientationVertical captures enum value "vertical"
	CreateNodeRequestOrientationVertical string = "vertical"

	// CreateNodeRequestOrientationUnknown captures enum value "unknown"
	CreateNodeRequestOrientationUnknown string = "unknown"
)

// prop value enum
func (m *CreateNodeRequest) validateOrientationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeOrientationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateOrientation(formats strfmt.Registry) error {

	if err := validate.Required("orientation", "body", m.Orientation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOrientationEnum("orientation", "body", *m.Orientation); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if m.Origin != nil {
		if err := m.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

func (m *CreateNodeRequest) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parentId", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := validate.MinimumInt("position", "body", int64(*m.Position), 0, false); err != nil {
		return err
	}

	return nil
}

var createNodeRequestTypeSubtypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","company","site","plant","ship","system","functional_location","asset","measurement_location","measurement_point","inspection_point","lubrication_point"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeSubtypePropEnum = append(createNodeRequestTypeSubtypePropEnum, v)
	}
}

const (

	// CreateNodeRequestSubtypeRoot captures enum value "root"
	CreateNodeRequestSubtypeRoot string = "root"

	// CreateNodeRequestSubtypeCompany captures enum value "company"
	CreateNodeRequestSubtypeCompany string = "company"

	// CreateNodeRequestSubtypeSite captures enum value "site"
	CreateNodeRequestSubtypeSite string = "site"

	// CreateNodeRequestSubtypePlant captures enum value "plant"
	CreateNodeRequestSubtypePlant string = "plant"

	// CreateNodeRequestSubtypeShip captures enum value "ship"
	CreateNodeRequestSubtypeShip string = "ship"

	// CreateNodeRequestSubtypeSystem captures enum value "system"
	CreateNodeRequestSubtypeSystem string = "system"

	// CreateNodeRequestSubtypeFunctionalLocation captures enum value "functional_location"
	CreateNodeRequestSubtypeFunctionalLocation string = "functional_location"

	// CreateNodeRequestSubtypeAsset captures enum value "asset"
	CreateNodeRequestSubtypeAsset string = "asset"

	// CreateNodeRequestSubtypeMeasurementLocation captures enum value "measurement_location"
	CreateNodeRequestSubtypeMeasurementLocation string = "measurement_location"

	// CreateNodeRequestSubtypeMeasurementPoint captures enum value "measurement_point"
	CreateNodeRequestSubtypeMeasurementPoint string = "measurement_point"

	// CreateNodeRequestSubtypeInspectionPoint captures enum value "inspection_point"
	CreateNodeRequestSubtypeInspectionPoint string = "inspection_point"

	// CreateNodeRequestSubtypeLubricationPoint captures enum value "lubrication_point"
	CreateNodeRequestSubtypeLubricationPoint string = "lubrication_point"
)

// prop value enum
func (m *CreateNodeRequest) validateSubtypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeSubtypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateSubtype(formats strfmt.Registry) error {

	if err := validate.Required("subtype", "body", m.Subtype); err != nil {
		return err
	}

	// value enum
	if err := m.validateSubtypeEnum("subtype", "body", *m.Subtype); err != nil {
		return err
	}

	return nil
}

var createNodeRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","company","site","plant","system","functional_location","asset","measurement_location","measurement_point","inspection_point","lubrication_point","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeTypePropEnum = append(createNodeRequestTypeTypePropEnum, v)
	}
}

const (

	// CreateNodeRequestTypeRoot captures enum value "root"
	CreateNodeRequestTypeRoot string = "root"

	// CreateNodeRequestTypeCompany captures enum value "company"
	CreateNodeRequestTypeCompany string = "company"

	// CreateNodeRequestTypeSite captures enum value "site"
	CreateNodeRequestTypeSite string = "site"

	// CreateNodeRequestTypePlant captures enum value "plant"
	CreateNodeRequestTypePlant string = "plant"

	// CreateNodeRequestTypeSystem captures enum value "system"
	CreateNodeRequestTypeSystem string = "system"

	// CreateNodeRequestTypeFunctionalLocation captures enum value "functional_location"
	CreateNodeRequestTypeFunctionalLocation string = "functional_location"

	// CreateNodeRequestTypeAsset captures enum value "asset"
	CreateNodeRequestTypeAsset string = "asset"

	// CreateNodeRequestTypeMeasurementLocation captures enum value "measurement_location"
	CreateNodeRequestTypeMeasurementLocation string = "measurement_location"

	// CreateNodeRequestTypeMeasurementPoint captures enum value "measurement_point"
	CreateNodeRequestTypeMeasurementPoint string = "measurement_point"

	// CreateNodeRequestTypeInspectionPoint captures enum value "inspection_point"
	CreateNodeRequestTypeInspectionPoint string = "inspection_point"

	// CreateNodeRequestTypeLubricationPoint captures enum value "lubrication_point"
	CreateNodeRequestTypeLubricationPoint string = "lubrication_point"

	// CreateNodeRequestTypeUnknown captures enum value "unknown"
	CreateNodeRequestTypeUnknown string = "unknown"
)

// prop value enum
func (m *CreateNodeRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CreateNodeRequest) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var createNodeRequestTypeVisualizationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["visualization_none","visualization_circular_gauge","visualization_level_gauge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNodeRequestTypeVisualizationTypePropEnum = append(createNodeRequestTypeVisualizationTypePropEnum, v)
	}
}

const (

	// CreateNodeRequestVisualizationTypeVisualizationNone captures enum value "visualization_none"
	CreateNodeRequestVisualizationTypeVisualizationNone string = "visualization_none"

	// CreateNodeRequestVisualizationTypeVisualizationCircularGauge captures enum value "visualization_circular_gauge"
	CreateNodeRequestVisualizationTypeVisualizationCircularGauge string = "visualization_circular_gauge"

	// CreateNodeRequestVisualizationTypeVisualizationLevelGauge captures enum value "visualization_level_gauge"
	CreateNodeRequestVisualizationTypeVisualizationLevelGauge string = "visualization_level_gauge"
)

// prop value enum
func (m *CreateNodeRequest) validateVisualizationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNodeRequestTypeVisualizationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNodeRequest) validateVisualizationType(formats strfmt.Registry) error {

	if swag.IsZero(m.VisualizationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisualizationTypeEnum("visualizationType", "body", m.VisualizationType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateNodeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNodeRequest) UnmarshalBinary(b []byte) error {
	var res CreateNodeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
